example_data01=data.frame(x,y)
nc=2
##ctle
######run vanilla mixture regerssion
res_MR=flexmix(formula,example_data01,k=nc)
######run adaptive trimming
res_CRMR=CTLE(formula,example_data01, nit=20,nc=nc)
res_CRMR=CTLE_my(formula,example_data01, nit=20,nc=nc)
#####run trimmed likelihood
tRatio=0.2 ##trimming ratio parameter
#res_tle1=try(TLE_CS(formula,family="gaussian",data, tRatio1, nit=5, msglvl=0, result=NULL, cit=2, test=NULL,nc=nc),silent=TRUE)
res_TLE= TLE(formula,example_data01, nc=nc,tRatio,MaxIt=200)
#####run bi-square mixture
res_mixbi = mixlinrb_bi(formula,example_data01,nc=nc, numini=20)
head(simuData)
rm(list=ls())
ls()
head(gaussData)
ls()
rm(list=ls())
#source("CTLE.short.R")
#source("TLE.short.R")
#source("bi_square.short.R")
#load("gaussData.RData")
x=(gaussData$x);y=as.numeric(gaussData$y);
formula=as.formula("y~x")
example_data01=data.frame(x,y)
nc=2
##ctle
######run vanilla mixture regerssion
res_MR=flexmix(formula,example_data01,k=nc)
######run adaptive trimming
res_CRMR=CTLE(formula,example_data01, nit=20,nc=nc)
#####run trimmed likelihood
tRatio=0.2 ##trimming ratio parameter
#res_tle1=try(TLE_CS(formula,family="gaussian",data, tRatio1, nit=5, msglvl=0, result=NULL, cit=2, test=NULL,nc=nc),silent=TRUE)
res_TLE= TLE(formula,example_data01, nc=nc,tRatio,MaxIt=200)
#####run bi-square mixture
res_mixbi = mixlinrb_bi(formula,example_data01,nc=nc, numini=20)
rm(list=ls())
formula
formula01=as.formula("y~x")
formula01
#source("CTLE.short.R")
#source("TLE.short.R")
#source("bi_square.short.R")
#load("simuData.RData")
formula02=as.formula("y~X1+X2")
nc=3
##ctle
######run vanilla mixture regerssion
res_MR=flexmix(formula02,data=simuData,k=nc)
######run adaptive trimming
res_CRMR=CTLE(formula02,data=simuData, nit=20,nc=nc)
#res_tle1=try(TLE_CS(formula,family="gaussian",data, tRatio1, nit=5, msglvl=0, result=NULL, cit=2, test=NULL,nc=nc),silent=TRUE)
res_TLE= TLE(formula02,data=simuData, nc=nc,tRatio,MaxIt=200)
######run adaptive trimming
res_CRMR=CTLE(formula02,data=simuData, nit=20,nc=nc)
getwd()
load("data_simu_list.RData")
load("~/F/PhD_Research/2020_01_04_package/data_simu_list.RData")
#load("bet_list_nc:3_pout:5_prlevel:3_n:500_nx:2_sigl:1_method:intersect_dist:g.final.RData")
#save(data_simu_list, file="data_simu_list.RData")
data_simu= data_simu_list[[1]]
x=t(data_simu$x);y=as.numeric(data_simu$y);
formula=as.formula(paste("y~",paste(colnames(x),collapse="+"),sep=""))
data=data.frame((x),y)
res_CRMR=CTLE(formula,data, nit=20,nc=3)
tRatio=0.05
res_TLE= TLE(formula,data, nc=3,tRatio,MaxIt=200)
res_mixbi = mixlinrb_bi(formula,data,nc=nc, numini=20)
class(data)
dim(data)
head(data)
head(simuData)
#source("CTLE.short.R")
#source("TLE.short.R")
#source("bi_square.short.R")
#load("simuData.RData")
example_data02 <- simuData[,1:3]
formula02=as.formula("y~X1+X2")
nc=3
##ctle
######run vanilla mixture regerssion
res_MR=flexmix(formula02,data=example_data02,k=nc)
######run adaptive trimming
res_CRMR=CTLE(formula02,data=example_data02, nit=20,nc=nc)
#####run bi-square mixture
res_mixbi = mixlinrb_bi(formula02,data=example_data02,nc=nc, numini=20)
flexmix
lr.method='rmr'
method.lib <- c('flexmix', 'TLE', 'CTLE', 'bi-square')
lr.method %in% method.lib
lr.method='flexmix'
lr.method %in% method.lib
lr.method ='aaa'
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","bi-squqre" ')
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","bi-squqre"!  ')
rmr <- function(lr.method='flexmix', formula=NULL, data=NULL, nc=3, nit=20, tRatio=0.2, MaxIt=200, numini=20)
{
is.na(formula) stop('Please input formula!')
is.na(data) stop('data is null!')
method.lib <- c('flexmix', 'TLE', 'CTLE', 'biSquare')
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","biSquqre"!  ')
if(lr.method=='flexmix')
{
res = flexmix(formula,data,k=nc)
}
if(lr.method=='CTLE')
{
res = CTLE(formula,data, nit,nc)
}
if(lr.method=='TLE')
{
res = TLE(formula,data, nc,tRatio,MaxIt)
}
if(lr.method=='biSquqre')
{
res = mixlinrb_bi(formula,data,nc, numini)
}
return(res)
}
rmr <- function(lr.method='flexmix', formula=NULL, data=NULL, nc=3, nit=20, tRatio=0.2, MaxIt=200, numini=20)
{
if(is.na(formula)) stop('Please input formula!')
if(is.na(data)) stop('data is null!')
method.lib <- c('flexmix', 'TLE', 'CTLE', 'biSquare')
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","biSquqre"!  ')
if(lr.method=='flexmix')
{
res = flexmix(formula,data,k=nc)
}
if(lr.method=='CTLE')
{
res = CTLE(formula,data, nit,nc)
}
if(lr.method=='TLE')
{
res = TLE(formula,data, nc,tRatio,MaxIt)
}
if(lr.method=='biSquqre')
{
res = mixlinrb_bi(formula,data,nc, numini)
}
return(res)
}
rm(list=ls())
#source("CTLE.short.R")
#source("TLE.short.R")
#source("bi_square.short.R")
#load("gaussData.RData")
x=(gaussData$x);y=as.numeric(gaussData$y);
formula01=as.formula("y~x")
example_data01=data.frame(x,y)
res_rmr = rmr(lr.method='flexmix', formula01, example_data01)
rmr <- function(lr.method='flexmix', formula=NULL, data=NULL, nc=3, nit=20, tRatio=0.2, MaxIt=200, numini=20)
{
if(is.na(formula)) stop('Please input formula!')
if(is.na(data)) stop('data is null!')
method.lib <- c('flexmix', 'TLE', 'CTLE', 'biSquare')
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","biSquqre"!  ')
if(lr.method=='flexmix')
{
res = flexmix(formula,data,k=nc)
}
if(lr.method=='CTLE')
{
res = CTLE(formula,data, nit,nc)
}
if(lr.method=='TLE')
{
res = TLE(formula,data, nc,tRatio,MaxIt)
}
if(lr.method=='biSquqre')
{
res = mixlinrb_bi(formula,data,nc, numini)
}
return(res)
}
res_rmr = rmr(lr.method='flexmix', formula01, example_data01)
class(res_rmr)
summary(res_rmr)
res_rmr = rmr(lr.method='TLE', formula01, example_data01)
y <- NULL
missing(y)
y
is.na(y)
flexmix
rmr <- function(lr.method='flexmix', formula=NULL, data=NULL, nc=3, nit=20, tRatio=0.2, MaxIt=200, numini=20)
{
if(is.null(formula)) stop('Please input formula!')
if(is.na(data)) stop('data is null!')
method.lib <- c('flexmix', 'TLE', 'CTLE', 'biSquare')
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","biSquqre"!  ')
if(lr.method=='flexmix')
{
res = flexmix(formula,data,k=nc)
}
if(lr.method=='CTLE')
{
res = CTLE(formula,data, nit,nc)
}
if(lr.method=='TLE')
{
res = TLE(formula,data, nc,tRatio,MaxIt)
}
if(lr.method=='biSquqre')
{
res = mixlinrb_bi(formula,data,nc, numini)
}
return(res)
}
res_rmr = rmr(lr.method='flexmix', formula01, example_data01)
rmr <- function(lr.method='flexmix', formula=NULL, data=NULL, nc=3, nit=20, tRatio=0.2, MaxIt=200, numini=20)
{
if(is.null(formula)) stop('Please input formula!')
if(is.null(data)) stop('data is null!')
method.lib <- c('flexmix', 'TLE', 'CTLE', 'biSquare')
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","biSquqre"!  ')
if(lr.method=='flexmix')
{
res = flexmix(formula,data,k=nc)
}
if(lr.method=='CTLE')
{
res = CTLE(formula,data, nit,nc)
}
if(lr.method=='TLE')
{
res = TLE(formula,data, nc,tRatio,MaxIt)
}
if(lr.method=='biSquqre')
{
res = mixlinrb_bi(formula,data,nc, numini)
}
return(res)
}
res_rmr = rmr(lr.method='flexmix', formula01, example_data01)
res_rmr = rmr(lr.method='TLE', formula01, example_data01)
res_rmr = rmr(lr.method='CTLE', formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='biSquare', formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='biSquare', formula=formula01, data=example_data01)
formula=formula01
data=example_data01
lr.method='biSquare'
lr.method=='biSquqre'
rmr <- function(lr.method='flexmix', formula=NULL, data=NULL, nc=3, nit=20, tRatio=0.2, MaxIt=200, numini=20)
{
if(is.null(formula)) stop('Please input formula!')
if(is.null(data)) stop('data is null!')
method.lib <- c('flexmix', 'TLE', 'CTLE', 'biSquare')
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","biSquare"!  ')
if(lr.method=='flexmix')
{
res = flexmix(formula,data,k=nc)
}
if(lr.method=='CTLE')
{
res = CTLE(formula,data, nit,nc)
}
if(lr.method=='TLE')
{
res = TLE(formula,data, nc,tRatio,MaxIt)
}
if(lr.method=='biSquare')
{
res = mixlinrb_bi(formula,data,nc, numini)
}
return(res)
}
res_rmr = rmr(lr.method='biSquare', formula=formula01, data=example_data01)
res = mixlinrb_bi(formula,data,nc, numini)
nc=3
nit=20
numini=20
res = mixlinrb_bi(formula,data,nc, numini)
res_rmr = rmr(lr.method='biSquare', formula=formula01, data=example_data01)
#source("CTLE.short.R")
#source("TLE.short.R")
#source("bi_square.short.R")
#load("gaussData.RData")
x=(gaussData$x);y=as.numeric(gaussData$y);
formula01=as.formula("y~x")
example_data01=data.frame(x,y)
res_rmr = rmr(lr.method='flexmix', formula=formula01, data=example_data01)
rmr <- function(lr.method='flexmix', formula=NULL, data=NULL, nc=3, nit=20, tRatio=0.2, MaxIt=200, numini=20)
{
if(is.null(formula)) stop('Please input formula!')
if(is.null(data)) stop('data is null!')
method.lib <- c('flexmix', 'TLE', 'CTLE', 'biSquare')
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","biSquare"!  ')
if(lr.method=='flexmix')
{
res = flexmix(formula,data,k=nc)
}
if(lr.method=='CTLE')
{
res = CTLE(formula,data, nit,nc)
}
if(lr.method=='TLE')
{
res = TLE(formula,data, nc,tRatio,MaxIt)
}
if(lr.method=='biSquare')
{
res = mixlinrb_bi(formula,data,nc, numini)
}
return(res)
}
res_rmr = rmr(lr.method='flexmix', formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='TLE', formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='CTLE', formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='biSquare', formula=formula01, data=example_data01)
#source("CTLE.short.R")
#source("TLE.short.R")
#source("bi_square.short.R")
#load("gaussData.RData")
x=(gaussData$x);y=as.numeric(gaussData$y);
formula01=as.formula("y~x")
example_data01=data.frame(x,y)
res_rmr = rmr(lr.method='biSquare', formula=formula01, data=example_data01)
rmr <- function(lr.method='flexmix', formula=NULL, data=NULL, nc=3, nit=20, tRatio=0.2, MaxIt=200, numini=20)
{
if(is.null(formula)) stop('Please input formula!')
if(is.null(data)) stop('data is null!')
method.lib <- c('flexmix', 'TLE', 'CTLE', 'biSquare')
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","biSquare"!  ')
if(lr.method=='flexmix')
{
res = flexmix(formula,data,k=nc)
}
if(lr.method=='CTLE')
{
res = CTLE(formula,data, nit,nc)
}
if(lr.method=='TLE')
{
res = TLE(formula,data, nc,tRatio,MaxIt)
}
if(lr.method=='biSquare')
{
res = mixlinrb_bi(formula,data,nc, numini)
}
return(res)
}
res_rmr = rmr(lr.method='biSquare', formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='flexmix', formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='CTLE', formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='TLE', formula=formula01, data=example_data01)
#source("CTLE.short.R")
#source("TLE.short.R")
#source("bi_square.short.R")
#load("simuData.RData")
example_data02 <- simuData[,1:3]
formula02=as.formula("y~X1+X2")
res_rmr = rmr(lr.method='flexmix', formula=formula01, data=example_data01, nc=3,tRatio=0.05)
res_rmr = rmr(lr.method='TLE', formula=formula01, data=example_data01, nc=3,tRatio=0.05)
res_rmr = rmr(lr.method='CTLE', formula=formula01, data=example_data01, nc=3,tRatio=0.05)
res_rmr = rmr(lr.method='biSquare', formula=formula01, data=example_data01, nc=3,tRatio=0.05)
class(example_data01)
head(example_data01)
head(example_data02)
table(example_data02[,1])
plot(example_data02[,1])
plot(example_data02[,1])
plot(example_data02[,2])
plot(example_data02[,3])
detach(package:rmr, unload=T)
devtools::install_github('changwn/RMR')
library(rmr)
library(rmr)
library(robust)
library(flexmix)
library(robustbase)
library(MASS)
library(gtools)
x=(gaussData$x);y=as.numeric(gaussData$y);
formula01=as.formula("y~x")
example_data01=data.frame(x,y)
res_rmr = rmr(lr.method='flexmix', formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='TLE', formula=formula01, data=example_data01)
res_rmr = rmr( formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='flexmix', formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='CTLE', formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='aaa', formula=formula01, data=example_data01)
res_rmr = rmr( formula=formula01, data=example_data01)
rmr <- function(lr.method=NULL, formula=NULL, data=NULL, nc=3, nit=20, tRatio=0.2, MaxIt=200, numini=20)
{
if(is.null(formula)) stop('Please input formula!')
if(is.null(data)) stop('data is null! Please input data')
method.lib <- c('flexmix', 'TLE', 'CTLE', 'biSquare')
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","biSquare"!  ')
if(lr.method=='flexmix')
{
res = flexmix(formula,data,k=nc)
}
if(lr.method=='CTLE')
{
res = CTLE(formula,data, nit,nc)
}
if(lr.method=='TLE')
{
res = TLE(formula,data, nc,tRatio,MaxIt)
}
if(lr.method=='biSquare')
{
res = mixlinrb_bi(formula,data,nc, numini)
}
return(res)
}
res_rmr = rmr( formula=formula01, data=example_data01)
rmr <- function(lr.method=NULL, formula=NULL, data=NULL, nc=3, nit=20, tRatio=0.2, MaxIt=200, numini=20)
{
if(is.null(formula)) stop('Please input formula!')
if(is.null(data)) stop('data is null! Please input data')
if(is.null(lr.method)) stop('Please input the regression method ("flexmix","TLE","CTLE","biSquare"). ')
method.lib <- c('flexmix', 'TLE', 'CTLE', 'biSquare')
if(!lr.method %in% method.lib) stop('lr.method must be chosen from "flexmix","TLE","CTLE","biSquare"!  ')
if(lr.method=='flexmix')
{
res = flexmix(formula,data,k=nc)
}
if(lr.method=='CTLE')
{
res = CTLE(formula,data, nit,nc)
}
if(lr.method=='TLE')
{
res = TLE(formula,data, nc,tRatio,MaxIt)
}
if(lr.method=='biSquare')
{
res = mixlinrb_bi(formula,data,nc, numini)
}
return(res)
}
res_rmr = rmr(formula=formula01, data=example_data01)
res_rmr = rmr(lr.method='CTLE', formula=formula01, data=example_data01)
library(rmr)
class(gaussData)
class(simuData)
library(rmr)
library(robust)
library(flexmix)
library(robustbase)
library(MASS)
library(gtools)
# gaussData
x=(gaussData$x);y=as.numeric(gaussData$y);
formula01=as.formula("y~x")
example_data01=data.frame(x,y)
res_rmr = rmr(lr.method='flexmix', formula=formula01, data=example_data01)
class(res_rmr)
str(res_rmr)
typeof(res_rmr)
devtools::document()
?rmr
devtools::document()
?rmr
?rmr
devtools::document()
?rmr
devtools::document()
?rmr
devtools::document()
?rmr
devtools::document()
?flexmix
?flexmix_2
devtools::document()
devtools::document()
?CTLE
?TLE
??CTLE
?TLE-formula-ANY-numeric-numeric-numeric-method
devtools::build()
help(rmr)
devtools::document()
devtools::document()
head(gaussData)
table(gaussData[,3])
dim(gaussData)
library(ggplot2)
dim(ggplot2::diamonds)
diamonds[1:2,]
dim(simuData)
head(simuData)
devtools::document()
?simuData
devtools::document()
?RobMixReg-class
?robMixReg
??RobMixReg
?RobMixReg
devtools::document()
?RobMixReg
devtools::document()
?RobMixReg
help(RobMixReg)
?RobMixReg
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?RobMixReg
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
